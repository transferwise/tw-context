# Github Actions Workflow. Generated by gradlewise plugin (ver. 0.4.0)
# All manual changes to this file will be LOST on the next build.

name: "GradleWise"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  # To rebuild regularly (e.g. once a week)
  # you can change this via the standard cron setup. Read-more at
  # https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#schedule
  schedule:
    - cron: "0 2 * * 1"
env:
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
  GA_GIT_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

jobs:
  build-and-test:
    name: "Build And Test"
    runs-on:
      - self-hosted
      - production
      - medium
    container: docker.tw.ee/actions_java11

    steps:
      - name: "Checkout git repo"
        uses: actions/checkout@v2
        with:
          fetch-depth: 2 # 1st commit is merge commit, we need one more to understand if snapshot is requested.
      - name: "Determine Branch"
        id: branch
        uses: transferwise/sanitize-branch-name@v1
      - name: "Assemble binaries"
        run: GRADLE_USER_HOME=$HOME/.gradle ./gradlew --console=plain --stacktrace assemble testClasses
        env:
          GA_GIT_BRANCH: ${{ steps.branch.outputs.sanitized-branch-name }}
          PUBLISH_REQUESTED: ${{ steps.trigger-docker.outputs.docker-upload }}
      - name: "Run tests"
        run: GRADLE_USER_HOME=$HOME/.gradle ./gradlew --console=plain --stacktrace --info check
        env:
          GA_GIT_BRANCH: ${{ steps.branch.outputs.sanitized-branch-name }}
          PUBLISH_REQUESTED: ${{ steps.trigger-docker.outputs.docker-upload }}
      - name: "Publish"
        run: GRADLE_USER_HOME=$HOME/.gradle ./gradlew --console=plain --stacktrace --info publish
        env:
          GA_GIT_BRANCH: ${{ steps.branch.outputs.sanitized-branch-name }}
          PUBLISH_REQUESTED: ${{ steps.trigger-docker.outputs.docker-upload }}
      - name: "Publish Test Report"
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          check_name: "Report generated by task ':tw-context-ownership-starter:test' (junitXml)"
          report_paths: 'tw-context-ownership-starter/build/test-results/test/**/*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Publish Test Report"
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          check_name: "Report generated by task ':tw-context-starter:test' (junitXml)"
          report_paths: 'tw-context-starter/build/test-results/test/**/*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Publish Test Report"
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          check_name: "Report generated by task ':tw-context:test' (junitXml)"
          report_paths: 'tw-context/build/test-results/test/**/*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Collect reports"
        run: |
          tar -zcvf _tw-context-ownership-starter_checkstyleMain.tar.gz tw-context-ownership-starter/build/reports/checkstyle/main.html || echo 'No such file'
          tar -zcvf _tw-context-ownership-starter_checkstyleTest.tar.gz tw-context-ownership-starter/build/reports/checkstyle/test.html || echo 'No such file'
          tar -zcvf _tw-context-ownership-starter_test.tar.gz tw-context-ownership-starter/build/reports/tests/test tw-context-ownership-starter/build/test-results/test || echo 'No such file'
          tar -zcvf _tw-context-starter_checkstyleMain.tar.gz tw-context-starter/build/reports/checkstyle/main.html || echo 'No such file'
          tar -zcvf _tw-context-starter_checkstyleTest.tar.gz tw-context-starter/build/reports/checkstyle/test.html || echo 'No such file'
          tar -zcvf _tw-context-starter_test.tar.gz tw-context-starter/build/reports/tests/test tw-context-starter/build/test-results/test || echo 'No such file'
          tar -zcvf _tw-context_checkstyleMain.tar.gz tw-context/build/reports/checkstyle/main.html || echo 'No such file'
          tar -zcvf _tw-context_checkstyleTest.tar.gz tw-context/build/reports/checkstyle/test.html || echo 'No such file'
          tar -zcvf _tw-context_test.tar.gz tw-context/build/reports/tests/test tw-context/build/test-results/test || echo 'No such file'
          tar -zcvf all-test-reports.tar.gz _tw-context-ownership-starter_checkstyleMain.tar.gz _tw-context-ownership-starter_checkstyleTest.tar.gz _tw-context-ownership-starter_test.tar.gz _tw-context-starter_checkstyleMain.tar.gz _tw-context-starter_checkstyleTest.tar.gz _tw-context-starter_test.tar.gz _tw-context_checkstyleMain.tar.gz _tw-context_checkstyleTest.tar.gz _tw-context_test.tar.gz
        if: always()
      - name: "Store test results"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: all-test-reports
          path: all-test-reports.tar.gz
          retention-days: 1

# Workflow was generated using following configs:

# config.buildAndTestJobConfig.container: docker.tw.ee/actions_java11
# config.buildAndTestJobConfig.containerSize: not defined
# config.buildAndTestJobConfig.env: {}
# config.cronSchedule: not defined
# config.dockerServices: []
# config.gradleBuildCommand: not defined
# config.gradlePublishCommand: not defined
# config.gradleTestCommand: not defined
# config.junitXmlReportPaths[0]: {Report generated by task ':tw-context-ownership-starter:test' (junitXml): tw-context-ownership-starter/build/test-results/test/**/*.xml}
# config.junitXmlReportPaths[1]: {Report generated by task ':tw-context-starter:test' (junitXml): tw-context-starter/build/test-results/test/**/*.xml}
# config.junitXmlReportPaths[2]: {Report generated by task ':tw-context:test' (junitXml): tw-context/build/test-results/test/**/*.xml}
# config.projectName: tw-context-root
# config.publishesTag: false
# config.reportsPaths[_tw-context-ownership-starter_checkstyleMain]: tw-context-ownership-starter/build/reports/checkstyle/main.html
# config.reportsPaths[_tw-context-ownership-starter_checkstyleTest]: tw-context-ownership-starter/build/reports/checkstyle/test.html
# config.reportsPaths[_tw-context-ownership-starter_test]: tw-context-ownership-starter/build/reports/tests/test tw-context-ownership-starter/build/test-results/test
# config.reportsPaths[_tw-context-starter_checkstyleMain]: tw-context-starter/build/reports/checkstyle/main.html
# config.reportsPaths[_tw-context-starter_checkstyleTest]: tw-context-starter/build/reports/checkstyle/test.html
# config.reportsPaths[_tw-context-starter_test]: tw-context-starter/build/reports/tests/test tw-context-starter/build/test-results/test
# config.reportsPaths[_tw-context_checkstyleMain]: tw-context/build/reports/checkstyle/main.html
# config.reportsPaths[_tw-context_checkstyleTest]: tw-context/build/reports/checkstyle/test.html
# config.reportsPaths[_tw-context_test]: tw-context/build/reports/tests/test tw-context/build/test-results/test
# config.sonarqubeAnalysePr: not defined
# config.sonarqubeEnabled: false
